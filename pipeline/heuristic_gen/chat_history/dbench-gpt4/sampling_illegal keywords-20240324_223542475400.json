{"dataset": [{"lang": "java", "bug_type": "illegal keywords", "buggy_code": "\nclass Solution {\n    public int[] dailyTemperatures(int[] temperatures) {\n        \n        let[] arr = new let[temperatures.length]; \n        \n        ArrayDeque<int[]> st = new ArrayDeque<>(); \n        \n        int i=0, j=temperatures.length-1 ; \n        \n        while( j >= 0){\n            \n            if(st.size()==0){\n                arr[i++] = 0;\n            }\n            else if (st.size()>0 && st.peek()[0]>temperatures[j])\n            {\n                arr[i++]=1;\n            } \n            else if (st.size()>0 && st.peek()[0]<=temperatures[j])\n            \n            {  while(st.size()>0 && st.peek()[0]<=temperatures[j]){\n                    st.pop();\n                    \n                }\n            if(st.size()==0){\n                arr[i++]=0;\n            }\n            else{\n                arr[i++]=st.peek()[1]-j;\n            }\n            } \n        st.push(new int[]{temperatures[j],j}); \n        j--;\n        }\n        \n      \n        let[] ans = new let[temperatures.length]; int k=0;\n        for(i=arr.length-1; i>=0; i--){\n            ans[k++]=arr[i];\n        }\n        return ans;\n    }\n}\n", "reasoning": "\nJava doesn't recognize \"let\" keyword that has been used to define the arrays.\n"}, {"lang": "python3", "bug_type": "illegal keywords", "buggy_code": "\nclass Solution:\n    def findKthLargest(self, nums: List[int], k: int) -> int:\n        return sort(nums)[-k]\n", "reasoning": "\nThe keyword \"sort\" is not a built-in function in Python. It should be \"sorted\".\n"}, {"lang": "python3", "bug_type": "illegal keywords", "buggy_code": "\nclass Solution:\n    def findValueOfPartition(self, nums: Array[int]) -> int:\n           \n        nums.sort()\n        min_diff = float('inf')\n        \n        for i in range(1,len(nums)):\n            min_diff = min(min_diff, abs(nums[i] - nums[i-1]))\n            \n        return min_diff\n", "reasoning": "\nThe bug is using 'Array' which is not a valid keyword in python3.\n"}, {"lang": "java", "bug_type": "illegal keywords", "buggy_code": "\nclass AuthenticationManager {\n\n    int timeToLive;\n    TreeSet<Integer> treeSet;\n    Map<String, Integer> map;\n    public AuthenticationManager(int timeToLive) {\n        this.timeToLive = timeToLive;\n        treeSet = new TreeSet<>();\n        map = new HashMap<>();\n    }\n    \n    public void generate(String tokenId, int currentTime) {\n        map.put(tokenId, currentTime + timeToLive);\n        treeSet.add(currentTime + timeToLive);\n    }\n    \n    public void renew(String tokenId, int currentTime) {\n        \n        Integer time = map.get(tokenId);\n        \n        if (time == null || time <= currentTime) return;\n\n        \n        map.put(tokenId, currentTime + timeToLive);\n        treeSet.remove(time);\n        treeSet.add(currentTime + timeToLive);\n\n        \n        while (!treeSet.isEmpty() && treeSet.lower(currentTime) is not None) {\n            treeSet.remove(treeSet.lower(currentTime));\n        }\n    }\n\n    \n    public int countUnexpiredTokens(int currentTime) {\n        return treeSet.tailSet(currentTime, false).size();\n    }\n}\n", "reasoning": "\nThe keyword `is not None` is not valid in Java, it's a Python syntax.\n"}, {"lang": "python3", "bug_type": "illegal keywords", "buggy_code": "\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:\n        depth = 0\n        stack = collections.deque([(root)])\n        d = $NULL \n        a = 0\n        while stack:\n            lvl = []\n            for i in range(len(stack)):\n                n = stack.popleft()\n                lvl.append(n.val)\n                if n.left: stack.append(n.left)\n                if n.right: stack.append(n.right)\n        return lvl[0]\n", "reasoning": "\nThe keyword $NULL is used, which is not a recognized keyword in Python.\n"}, {"lang": "java", "bug_type": "illegal keywords", "buggy_code": "\nclass Solution:\n    def addStrings(self, num1: str, num2: str) -> str:\n        sys.set_int_max_str_digits(10000)\n        nattu = int(num1)\n        babu = int(num2)\n        result = str(nattu+babu)\n        return result\n", "reasoning": "\nThe code uses \"sys.set_int_max_str_digits(10000)\" which is not defined in Java language.\n"}, {"lang": "cpp", "bug_type": "illegal keywords", "buggy_code": "\nclass FrequencyTracker {\npublic:\n    unordered_map<int,int> x,y;\n    def add(number): \n        x[number]++;\n        if(x[number]!=1) y[x[number]-1]--;\n        y[x[number]]++;\n    def deleteOne(number): \n        if(x[number]!=0){\n            x[number]--;\n            y[x[number]+1]--;\n            y[x[number]]++;\n        }\n    def hasFrequency(frequency): \n        if(y[frequency]!=0) return true;\n        return false;\n};\n", "reasoning": "\nThe bug is the use of 'def' keyword from Python to define methods, unrecognizable to C++.\n"}, {"lang": "java", "bug_type": "illegal keywords", "buggy_code": "\nclass Solution {\n    int count = 0;\n    \n    public void countGoodNodes(TreeNode root, var maximum) {\n            if(root!=null) {\n                if (maximum <= root.val) {\n                    maximum = root.val;\n                    count++;\n                }\n            countGoodNodes(root.left,maximum);\n            countGoodNodes(root.right, maximum);\n        } \n    }\n\n    public int goodNodes(TreeNode root) {\n        var maximum = root.val;\n        countGoodNodes(root,  maximum);\n        return count;\n    }\n}\n", "reasoning": "\nThe bug is the use of 'var' which is not defined in Java, it's from JavaScript.\n"}, {"lang": "cpp", "bug_type": "illegal keywords", "buggy_code": "\nclass Solution {\npublic:\n    let sumOfMultiples = (n, count=0) =>{\n       \n       \n       for (let i=1;i<=n;i++)\n       {\n         if (i%3==0 || i%5==0 ||i%7==0)\n           count+=i;\n       }\n    return count;\n\n    }\n};\n", "reasoning": "\nThe bug is using javascript keywords like \"let\" and arrow functions in a C++ program.\n"}, {"lang": "cpp", "bug_type": "illegal keywords", "buggy_code": "\nclass Solution {\npublic:\n\n    def build_board(vector<int> &rods, int balance,int i,vector<vector<int>> &memo)\n    {\n        if(i>=rods.size() && balance==0)\n            return 0;\n        if(i>=rods.size() && balance!=0)\n            return INT_MIN;\n\n        if(memo[i][balance+5000]!=-1)\n            return memo[i][balance+5000];\n        int left= build_board(rods,balance+rods[i],i+1,memo);\n        int right= build_board(rods,balance-rods[i],i+1,memo);\n\n        int ans= rods[i]+max(left,right);\n\n        int skip= build_board(rods,balance,i+1,memo);\n\n        ans= max(ans,skip);\n\n        memo[i][balance+5000]=ans;\n        return ans;\n\n    }\n\n    int tallestBillboard(vector<int>& rods) {\n        \n        vector<vector<int>> memo(rods.size(),vector<int>(10001,-1));\n        int ans= build_board(rods,0,0,memo);\n\n        if(ans<=0)\n            return 0;\n        else\n            return ans/2;\n    }\n};\n", "reasoning": "\nThe \"def\" keyword used in the function declaration is not a valid C++ keyword.\n"}], "heuristic": "<heuristic> To correctly identify and fix language-specific keyword mistakes, you can follow this step-by-step heuristic. Begin by recognizing the syntax and structure that are incorrect for the language you're dealing with. This involves having a basic understanding of the language's syntax rules, including the correct way to declare variables, define functions, manage control flow, and interact with data structures. If you come across a symbol, keyword, or structure that seems unfamiliar or out of place, compare it to the standard syntax rules of the language in question. Look up the language's official documentation or a trusted programming reference to confirm if the syntax is valid. For instance, encountering a `let` or `def` keyword in Java or C++ code, or an `is not None` statement in Java, should raise immediate red flags because these syntactic elements belong to other languages like JavaScript and Python. Once you've identified an incorrect use of language-specific syntax, replace it with the correct keyword or structure per the language's norms. For variable declarations, ensure the right type declaration keyword is used (e.g., `int`, `var`, `let` according to the language). For function definitions, confirm that you're using the correct method signature syntax specific to the language (e.g., `def` in Python, regular method declaration in Java and C++). By methodically checking for language congruency and using official documentation as a guide, you can accurately identify and correct these kinds of errors. </heuristic>"}