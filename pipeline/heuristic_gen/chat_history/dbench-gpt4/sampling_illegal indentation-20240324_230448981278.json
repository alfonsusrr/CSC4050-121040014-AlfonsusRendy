{"dataset": [{"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass TopVotedCandidate:\n\n    def __init__(self, persons: List[int], times: List[int]):\n        self.persons = []\n        self.times = []\n        self.dic = collections.defaultdict(int)\n        self.m = 0\n            self.idx = -1\n\n        for i in range(len(times)):\n            self.times.append(times[i])\n            self.dic[persons[i]] += 1\n            if self.dic[persons[i]] >= self.m:\n                self.persons.append(persons[i])\n                self.m = self.dic[persons[i]]\n            else:\n                self.persons.append(self.persons[-1])\n\n    def q(self, t: int) -> int:\n        idx = bisect.bisect_right(self.times,t)\n        return self.persons[idx-1]\n", "reasoning": "\nThere is an unexpected indentation of the \"self.idx = -1\" under the \"__init__\" function.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\n    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:\n        count=[0]*101\n    res=[]\n    for num in nums:\n        count[num]+=1 \n    for num in nums:\n        res.append(sum(count[:num]))\n    return res\n", "reasoning": "\nThe indentation error makes 'res' array and the for loops to be outside the 'smallerNumbersThanCurrent' function.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\n    def isPossibleToCutPath(self, grid: List[List[int]]) -> bool:\n        m, n = len(grid), len(grid[0])\n        dirs = [(-1, 0), (0, -1)]\n        def dfs(i: int, j: int) -> None:\n            grid[i][j] = 2\n        for di, dj in dirs:\n            if 0 <= i + di < m and 0 <= j + dj < n and grid[i + di][j + dj] == 1: dfs(i + di, j + dj)\n\n        dfs(m - 1, n - 1)\n\n        dq = collections.deque([(0, 0)])\n        grid[0][0] = 0\n        dirs = [(1, 0), (0, 1)]\n        while dq:\n            l = len(dq)\n            for _ in range(l):\n                i, j = dq.popleft()\n                if i == m - 1 and j == n - 1: return False\n                for di, dj in dirs:\n                    if 0 <= i + di < m and 0 <= j + dj < n and grid[i + di][j + dj] == 2: \n                        dq.append((i + di, j + dj))\n                        grid[i + di][j + dj] = 0\n\n\n            if len(dq) == 1 and dq[0] != (m - 1, n - 1): return True\n\n        return True\n", "reasoning": "\nThe for-loop after grid[i][j] = 2 under dfs method is wrongly indented outside dfs.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass BIT():\n    def __init__(self, n):\n        self.n = n\n    self.tree = [0] * (n + 1)\n\n    def sum(self, i):\n        ans = 0\n        i += 1\n        while i > 0:\n            ans += self.tree[i]\n            i -= (i & (-i))\n        return ans\n\n    def update(self, i, value):\n        i += 1\n        while i <= self.n:\n            self.tree[i] += value\n            i += (i & (-i))\n\n\nclass Solution:\n    def isTransformable(self, s: str, t: str) -> bool:\n        if Counter(s)!=Counter(t):\n            return False\n        ind = defaultdict(deque)\n        for id, i in enumerate(t):\n            ind[i].append(id)\n        a = []\n        for i in s:\n            a.append(ind[i].popleft())\n        n=len(a)\n        bt=BIT(n+1)\n        ind=defaultdict(lambda :-1)\n        for i in range(n):\n            inv=bt.sum(n)-bt.sum(a[i])\n            bt.update(a[i],1)\n            for dig in range(int(s[i])-1,-1,-1):\n                if ind[dig]>=i-inv:\n                    return False\n            ind[int(s[i])]=i-inv\n        return True\n", "reasoning": "\nThe line \"self.tree = [0] * (n + 1)\" is improperly indented causing an IndentationError.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\n    def maxNiceDivisors(self, primeFactors: int) -> int:\n        if primeFactors <= 3:\n            return primeFactors\n        \n        MOD = int(1e9 + 7)\n        if primeFactors % 3 == 0:\n            power = primeFactors // 3\n            return self.calculateNiceDivisors(3, power, MOD)\n        elif primeFactors % 3 == 1:\n            power = (primeFactors // 3) - 1\n            return (self.calculateNiceDivisors(3, power, MOD) * 4) % MOD\n    else:\n        power = primeFactors // 3\n        return (self.calculateNiceDivisors(3, power, MOD) * 2) % MOD\n    \n    def calculateNiceDivisors(self, base: int, power: int, MOD: int) -> int:\n        if power == 0:\n            return 1\n\n        result = self.calculateNiceDivisors(base, power // 2, MOD)\n        result = (result * result) % MOD\n\n        if power % 2 == 1:\n            result = (result * base) % MOD\n\n        return result\n", "reasoning": "\nThe last else clause is incorrectly indented causing it to be outside the function.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\n    def maximumNumber(self, num: str, change: List[int]) -> str:\n        num = list(num)\n        on = False \n     for i, ch in enumerate(num): \n         x = int(ch)\n         if x < change[x]: \n              on = True\n              num[i] = str(change[x])\n         elif x > change[x] and on: break\n    return \"\".join(num)\n", "reasoning": "\nThe indents of for loop and return statement are not aligned properly with method body.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\n    def cdist(self, it, distArray, distArrayIndex, edges):\n    rdist = 0 \n    nodes = []\n    while it != -1 and distArray[it][distArrayIndex] > rdist:\n        distArray[it][distArrayIndex] = rdist\n        nodes.append(it)\n        it = edges[it]\n        rdist += 1\n    return nodes\n            \n    def closestMeetingNode(self, edges: List[int], node1: int, node2: int) -> int:\n        INF = float('inf')\n        dist = defaultdict(lambda: [INF,INF])\n        mmin, ans = INF, INF\n               \n        n = self.cdist(node1, dist, 0, edges)\n        n += self.cdist(node2, dist, 1, edges)\n                \n        for k in n:\n            m = max(dist[k])\n            if m != INF:\n                if m < mmin: \n                    mmin = m\n                    ans = k\n                elif m == mmin: \n                    ans = min(ans, k)\n                    \n        return ans if ans != float('inf') else -1\n", "reasoning": "\nThe 'rdist' and 'nodes' lines are not indented properly causing an IndentationError.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\n        curVal=len(nums)\n        for i in range(start,len(nums)):\n        if nums[i]==target:\n            curVal=min(curVal,abs(i-start))\n            break\n        j=start\n        while(j>=0):\n            if nums[j]==target:\n                curVal=min(curVal,abs(j-start))\n                break\n            j-=1\n        return curVal\n", "reasoning": "\n\"if\" condition statement is not indented properly inside the \"for\" loop.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n    if len(prices) < 2:\n        return 0\n    if len(prices) == 2:\n        output = prices[1] - prices[0]\n        return output if output > 0 else 0\n    i = 0\n    j = 1\n    stockBuy = prices[i]\n    stockSell = prices[j]\n    counter = 0\n    profit = 0\n    while counter < len(prices)-2:\n        if stockSell - stockBuy < 0:\n            i = counter + 1\n            j = i + 1\n        else:\n            if prices[j+1] > prices[j]:\n                j += 1\n            else:\n                profit = profit + (stockSell - stockBuy)\n                i = counter + 1\n                j = i + 1\n\n        stockSell = prices[j]\n        stockBuy = prices[i]\n        counter += 1\n    if (stockSell - stockBuy) > 0:\n        profit = profit + (stockSell - stockBuy)\n    return profit\n", "reasoning": "\nThe statements under the maxProfit method are not indented correctly causing indentation error.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\ndef sumSubarrayMins(self, arr: List[int]) -> int:\n    stack = []\n    res = 0\n    arr = [float('-inf')] + arr + [float('-inf')]\n    for i, num in enumerate(arr):\n        while stack and arr[stack[-1]] > num:\n            cur = stack.pop()\n            res += arr[cur] * (i - cur) * (cur - stack[-1])\n        stack.append(i)\n    return res % (10**9 + 7)\n", "reasoning": "\nThe function sumSubarrayMins is not properly indented after class Solution.\n"}], "heuristic": "<heuristic> To identify and correct indentation errors in Python code, follow these step-by-step guidelines. First, ensure that every block of code (including functions, loops, conditionals, and class methods) starts with a correctly indented line following the statement introducing the block. For this, check if the line immediately after structures like `def`, `for`, `if`, `elif`, `else`, `class`, and similar keywords or colons is indented four spaces (or one tab, depending on the convention being followed) to the right compared to its parent statement. For blocks inside blocks (nested structures), ensure that the indentation increases progressively by four spaces (or one tab) for each level of nesting. If a line appears to begin at an incorrect indentation level, adjust it to match its logical level in the code structure. In cases where a line seems to be part of a block but aligns with the outer block or the base level of the class or function definition, this is likely an indentation error. For continuation lines, make sure they align in a way that makes the block of code visually distinguishable and logically grouped, adhering to Python's indentation rules. By applying this heuristic iteratively throughout the code from top to bottom, most indentation-related bugs can be accurately identified and corrected. </heuristic>"}