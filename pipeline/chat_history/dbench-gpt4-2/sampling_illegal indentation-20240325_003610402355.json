{"dataset": [{"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\n    def maximumNumber(self, num: str, change: List[int]) -> str:\n        num = list(num)\n        on = False \n     for i, ch in enumerate(num): \n         x = int(ch)\n         if x < change[x]: \n              on = True\n              num[i] = str(change[x])\n         elif x > change[x] and on: break\n    return \"\".join(num)\n", "reasoning": "\nThe indents of for loop and return statement are not aligned properly with method body.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n    s= ''.join(map(str,digits))\n    i=int(s)+1\n    li=list(map(int,str(i)))  \n    return li\n", "reasoning": "\n\"plusOne\" method contents should be indented, else Python raises IndentationError.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\ndef fun(root,mx,mn,ans):\nif(root==None):\n    return\nd1=abs(root.val-mx)\nd2=abs(root.val-mn)\nans[0]=max(d1,d2,ans[0])\nmx=max(mx,root.val)\nmn=min(mn,root.val)\nfun(root.left,mx,mn,ans)\nfun(root.right,mx,mn,ans)\nclass Solution:\n    def maxAncestorDiff(self, root: Optional[TreeNode]) -> int:\n        ans=[0]\n        if(root==None):\n            return 0\n        fun(root,root.val,root.val,ans)\n        return ans[0]\n", "reasoning": "\nThe bug is due to the missing indentation after the definition of function fun().\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\n    def cdist(self, it, distArray, distArrayIndex, edges):\n    rdist = 0 \n    nodes = []\n    while it != -1 and distArray[it][distArrayIndex] > rdist:\n        distArray[it][distArrayIndex] = rdist\n        nodes.append(it)\n        it = edges[it]\n        rdist += 1\n    return nodes\n            \n    def closestMeetingNode(self, edges: List[int], node1: int, node2: int) -> int:\n        INF = float('inf')\n        dist = defaultdict(lambda: [INF,INF])\n        mmin, ans = INF, INF\n               \n        n = self.cdist(node1, dist, 0, edges)\n        n += self.cdist(node2, dist, 1, edges)\n                \n        for k in n:\n            m = max(dist[k])\n            if m != INF:\n                if m < mmin: \n                    mmin = m\n                    ans = k\n                elif m == mmin: \n                    ans = min(ans, k)\n                    \n        return ans if ans != float('inf') else -1\n", "reasoning": "\nThe 'rdist' and 'nodes' lines are not indented properly causing an IndentationError.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\ndef increasingBST(self, root: TreeNode) -> TreeNode:\n    newRoot = TreeNode(0)\n    self.temp = newRoot\n    def inorder(root):\n        if root is None: return None\n        inorder(root.left)\n        new = TreeNode(root.val)\n        self.temp.right = new\n        self.temp = self.temp.right\n        inorder(root.right)\n    inorder(root)\n    return newRoot.right\n", "reasoning": "\nThe 'increasingBST' method is not correctly indented; it should be inside the 'Solution' class.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\n    def areAlmostEqual(self, s1: str, s2: str) -> bool:\n        if len(s1)!=len(s2):\n            return False\n            if s1==s2:\n                return True\n        diff=[]\n        for i in range(len(s1)):\n            if s1[i]!=s2[i]:\n                diff.append([s1[i],s2[i]])\n        if len(diff)==2 and diff[0]==diff[-1][::-1]:\n            return True\n        else:\n            return False\n", "reasoning": "\nThe statement checking if s1 is equal to s2 is inside the previous if statement.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\n    def maxNiceDivisors(self, primeFactors: int) -> int:\n        if primeFactors <= 3:\n            return primeFactors\n        \n        MOD = int(1e9 + 7)\n        if primeFactors % 3 == 0:\n            power = primeFactors // 3\n            return self.calculateNiceDivisors(3, power, MOD)\n        elif primeFactors % 3 == 1:\n            power = (primeFactors // 3) - 1\n            return (self.calculateNiceDivisors(3, power, MOD) * 4) % MOD\n    else:\n        power = primeFactors // 3\n        return (self.calculateNiceDivisors(3, power, MOD) * 2) % MOD\n    \n    def calculateNiceDivisors(self, base: int, power: int, MOD: int) -> int:\n        if power == 0:\n            return 1\n\n        result = self.calculateNiceDivisors(base, power // 2, MOD)\n        result = (result * result) % MOD\n\n        if power % 2 == 1:\n            result = (result * base) % MOD\n\n        return result\n", "reasoning": "\nThe last else clause is incorrectly indented causing it to be outside the function.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\ndef getNoZeroIntegers(self, n: int) -> List[int]:\n    for i in range(n-1, -1, -1):\n        if '0' not in str(i) and '0' not in str(n - i):\n            return [i, n-i ]\n\n    \n\n    return next([i, n-i] for i in range(n-1, -1, -1) if '0' not in str(i) and '0' not in str(n-i))\n", "reasoning": "\nThe method \"getNoZeroIntegers\" is not correctly indented under the class Solution.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass TopVotedCandidate:\n\n    def __init__(self, persons: List[int], times: List[int]):\n        self.persons = []\n        self.times = []\n        self.dic = collections.defaultdict(int)\n        self.m = 0\n            self.idx = -1\n\n        for i in range(len(times)):\n            self.times.append(times[i])\n            self.dic[persons[i]] += 1\n            if self.dic[persons[i]] >= self.m:\n                self.persons.append(persons[i])\n                self.m = self.dic[persons[i]]\n            else:\n                self.persons.append(self.persons[-1])\n\n    def q(self, t: int) -> int:\n        idx = bisect.bisect_right(self.times,t)\n        return self.persons[idx-1]\n", "reasoning": "\nThere is an unexpected indentation of the \"self.idx = -1\" under the \"__init__\" function.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\n    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:\n        count=[0]*101\n    res=[]\n    for num in nums:\n        count[num]+=1 \n    for num in nums:\n        res.append(sum(count[:num]))\n    return res\n", "reasoning": "\nThe indentation error makes 'res' array and the for loops to be outside the 'smallerNumbersThanCurrent' function.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\ndef canWinNim(self, n: int) -> bool:\n    return n % 4 != 0\n", "reasoning": "\nPython rules for indentation are not followed correctly, causing an IndentationError.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass NumArray:\n\n    def __init__(self, nums: List[int]):\n    self.nums=[0]+list(accumulate(nums))\n    print(self.nums)\n\n    def sumRange(self, left: int, right: int) -> int:\n        return self.nums[right+1]-self.nums[left]\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# param_1 = obj.sumRange(left,right)\n", "reasoning": "\nThe indentation is incorrect in the __init__ method causing an IndentationError. \n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nmod = 10**9+7\n\nclass Solution:\ndef countAnagrams(self, s: str) -> int:\n\n    l = s.split()\n    ans = 1\n\n    for i in l:\n        d = {}\n    \n        for j in i:\n            if(d.get(j)):\n                d[j] += 1\n            else:\n                d[j] = 1  \n    \n        duplicates = 1\n        for j in d.values():\n            duplicates *= math.factorial(j)\n        curr = math.factorial(len(i))//duplicates\n\n        ans *= curr\n        ans = ans%mod\n\n    return ans\n", "reasoning": "\nThe \"def countAnagrams\" is not indented properly under the Solution class.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\n        def checkReverse(ans):\n            l,r = 0,len(ans)-1\n            while l<=r:\n                ans[l],ans[r] = ans[r],ans[l]\n                l+=1\n            r-=1\n            return ans\n\n        if not root: return None\n        q,ans = [root],[]\n        while q:\n            n,l = len(q),[]\n            for i in range(n):\n                curr = q.pop(0)\n                l.append(curr.val)\n               if curr.left:\n                q.append(curr.left)\n               if curr.right:\n                    q.append(curr.right)\n            ans.append(l)\n        return checkReverse(ans)\n", "reasoning": "\nThe if statement for appending left and right nodes to queue is not indented correctly.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\n    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:\n        '''\n        |a1[i]-a1[j]| + |a2[i]-a2[j]| + |i-j|\n        total 2(+ or -)**(no. of modules) == 2**3 cases\n\n        --> a1[i]-a1[j]+a2[i]-a2[j]+i-j\n            == (a1[i]+a2[i]+i) - (a1[j]+a2[j]+j)\n\n        --> a1[i]-a1[j]+a2[i]-a2[j]-i-j\n            == (a1[i]+a2[i]-i) - (a1[j]+a2[j]-j)\n        \n        ...etc\n        '''\n        val1,val2,val3,val4=[],[],[],[]\n        for i in range(len(arr1)):\n            val1.append(i+arr1[i]+arr2[i])\n            val2.append(i+arr1[i]-arr2[i])\n            val3.append(i-arr1[i]+arr2[i])\n        val4.append(i-arr1[i]-arr2[i])\n        ans=0\n        ans=max(ans,max(val1)-min(val1))\n        ans=max(ans,max(val2)-min(val2))\n        ans=max(ans,max(val3)-min(val3))\n        ans=max(ans,max(val4)-min(val4))\n        return ans\n", "reasoning": "\nThe line 'val4.append(i-arr1[i]-arr2[i])' is not correctly indented under the for loop.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\n    def findTheString(self, lcp: List[List[int]]) -> str:\n        # simple validation\n        n = len(lcp)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if lcp[i][j] != lcp[j][i]:\n                    return ''\n                if lcp[i][j] > n - j:\n                    return ''\n        for i in range(n):\n            if lcp[i][i] != n - i:\n                return ''\n        \n        # build pattern \\u2014 the only possible candidate for answer\n        pattern = [None for _ in range(n)]\n        next_el_ind = 0\n        for i in range(n):\n        if pattern[i] is not None:\n            continue\n        pattern[i] = next_el_ind\n        next_el_ind += 1\n        for j in range(i+1, n):\n            if lcp[i][j] > 0:\n                if pattern[j] is not None and pattern[j] != pattern[i]:\n                    return ''\n                pattern[j] = pattern[i]\n    \n        # check if lcp is valid - check that pattern's lcp == original lcp\n        pattern_lcp = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n-1, -1, -1):\n            for j in range(n-1, -1, -1):\n                if pattern[i] == pattern[j]:\n                    if max(i, j) + 1 < n:\n                        pattern_lcp[i][j] = pattern_lcp[i+1][j+1] + 1\n                    else:\n                        pattern_lcp[i][j] = 1\n        for i in range(n):\n            for j in range(n):\n                if lcp[i][j] != pattern_lcp[i][j]:\n                    return ''\n    \n        # check that answer has no more than 26 distinct elements\n        if max(pattern) > ord('z') - ord('a'):\n            return ''\n\n        return  ''.join(chr(ord('a') + ind) for ind in pattern)\n", "reasoning": "\nThe indentation for the if condition inside the for loop is not correct.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass BIT():\n    def __init__(self, n):\n        self.n = n\n    self.tree = [0] * (n + 1)\n\n    def sum(self, i):\n        ans = 0\n        i += 1\n        while i > 0:\n            ans += self.tree[i]\n            i -= (i & (-i))\n        return ans\n\n    def update(self, i, value):\n        i += 1\n        while i <= self.n:\n            self.tree[i] += value\n            i += (i & (-i))\n\n\nclass Solution:\n    def isTransformable(self, s: str, t: str) -> bool:\n        if Counter(s)!=Counter(t):\n            return False\n        ind = defaultdict(deque)\n        for id, i in enumerate(t):\n            ind[i].append(id)\n        a = []\n        for i in s:\n            a.append(ind[i].popleft())\n        n=len(a)\n        bt=BIT(n+1)\n        ind=defaultdict(lambda :-1)\n        for i in range(n):\n            inv=bt.sum(n)-bt.sum(a[i])\n            bt.update(a[i],1)\n            for dig in range(int(s[i])-1,-1,-1):\n                if ind[dig]>=i-inv:\n                    return False\n            ind[int(s[i])]=i-inv\n        return True\n", "reasoning": "\nThe line \"self.tree = [0] * (n + 1)\" is improperly indented causing an IndentationError.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\ndef gridGame(self, grid: List[List[int]]) -> int: \n    result = float(\"inf\")\n    left,right = 0,sum(grid[0])\n\n    for a,b in zip(grid[0],grid[1]):\n        right-=a\n\n        result = min(result,max(left,right))\n        left+=b\n\n    return result\n\n# time & space - O(n),O(1)\n", "reasoning": "\nThe function gridGame is not indented properly, it should be inside the Solution class.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\n    def findComplement(self, num: int) -> int:\n        com = ''\n        while num > 0 :\n            \n            if num % 2 == 1:\n           com += '0'\n            else:\n                com += '1'\n            num = num // 2\n        return int(com[::-1],2)\n", "reasoning": "\nThe indentation level of 'com += '0'' does not align with its surrounding code block.\n"}, {"lang": "python3", "bug_type": "illegal indentation", "buggy_code": "\nclass Solution:\n    def minSpeedOnTime(self, dist: List[int], hour: float) -> int:\n    if len(dist) >= hour + 1  : return -1\n    left,right = 1, ceil(max(max(dist),dist[-1]/(1 if hour.is_integer() else hour-int(hour))))\n    while left<right:\n        mid=(left+right)//2\n        if sum([ceil(i/mid) for i in dist[:-1]])+(dist[-1]/mid) <= hour :\n            right=mid\n        else:\n            left=mid+1\n    return left\n", "reasoning": "\nThe function 'minSpeedOnTime' is not properly indented, causing a IndentationError.\n"}], "heuristic": "<heuristic>\n\n**Automated Fault Localization Heuristic for Indentation Errors in Python Code**\n\n**Step 1:** Tokenize the Python source code using a lexical analyzer specific to the Python language. This step converts the source code into a stream of tokens, including INDENT and DEDENT tokens, which are critical for identifying indentation levels.\n\n**Step 2:** Construct a parse tree from the token stream, paying special attention to INDENT and DEDENT tokens. This creates a structured representation of the code that mirrors the blocks and scope defined by indentation.\n\n**Step 3:** Traverse the parse tree in a depth-first manner. For each node (corresponding to constructs like classes, methods, loops, conditionals), calculate the expected indentation level based on its hierarchical level in the tree. The root node (e.g., the entire file) has an indentation level of 0, its direct children have an indentation level of 1, and so on.\n\n**Mathematical Formulation of Expected Indentation Level:**\nGiven a node at depth \\(d\\) in the parse tree, the expected indentation level \\(I_e\\) can be calculated as:\n\\[ I_e(d) = d \\times S \\]\nwhere \\(S\\) is the standard indentation step (e.g., 4 spaces in PEP 8 style Python code).\n\n**Step 4:** Compare the expected indentation level \\(I_e\\) with the actual indentation level \\(I_a\\), extracted from the INDENT tokens associated with each node during the tree traversal. The actual indentation level is the count of spaces (or the presence of a tab character, depending on the coding style) before the first non-whitespace character of the line corresponding to the node. \n\n**Step 5:** If the actual indentation level \\(I_a\\) of a node does not match its expected indentation level \\(I_e\\), mark the code line corresponding to that node as a potential site of an IndentationError. \n\n**Step 6:** Report all lines marked as potential error sites to the developer along with the expected and actual indentation levels to assist in debugging.\n\nThis heuristic takes advantage of the structured nature of Python code defined by its indentation rules, enabling the automated identification of indentation-related bugs by analyzing discrepancies between the expected and actual indentation levels in the code's structure.\n\n</heuristic>"}