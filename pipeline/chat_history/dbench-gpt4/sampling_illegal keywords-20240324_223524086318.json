{"dataset": [{"lang": "cpp", "bug_type": "illegal keywords", "buggy_code": "\nclass Solution {\npublic:\n    int longestWPI(vector<int>& hours) {\n    dict<int,int> mp;\n    int k=0,ans=0;\n    for(int i=0;i<hours.size();i++)\n    {\n        if(hours[i]>8)  k++; else   k--;\n        if(k>0)\n        {\n        ans=max(ans,i+1);\n        } else{\n            if(mp.find(k-1)!=mp.end()){\n                ans=max(ans,i-mp[k-1]);\n            }\n             if(mp.find(k)==mp.end()){\n                mp[k]=i;\n            }\n        }\n       \n    }    \n    return ans;\n    }\n};\n", "reasoning": "\nThe bug is using 'dict' instead of 'map'. 'dict' is not valid in C++.\n"}, {"lang": "cpp", "bug_type": "illegal keywords", "buggy_code": "\nclass LRUCache {\npublic:\nclass node\n{\n  public:\n  int key;\n  int val;\n  node* next;\n  node* prev;\n  node(int _key,int _val)\n  {\n    key = _key;\n    val = _val;\n  }\n};\nnode* head = new node(-1,-1);\nnode* tail = new node(-1,-1);\n\nint size;\nunordered_map<int,node*>mpp;\n    LRUCache(int capacity) {\n       size = capacity; \n       head->next = tail;\n       tail->prev = head;  \n    }\n\n    void addNode(node* newNode){\n       \n       node* temp = head->next;\n       newNode->next = temp;\n       newNode->prev = head;\n       head->next = newNode;\n       temp->prev = newNode;\n    }\n\n    void deleteNode(node* delNode){\n         \n       node* delprev = delNode->prev;\n       node* delnext = delNode->next;\n       delprev->next = delnext;\n       delnext->prev = delprev;\n    }\n    \n    int get(int _key) {\n        \n        if(mpp.count(_key))\n        {\n          node* nde = mpp[_key];\n          int curr = nde->val;\n          mpp.erase(_key);\n          deleteNode(nde);\n          addNode(nde);\n          mpp[_key] = head->next;\n          return curr;\n        }\n        return -1;\n    }\n    \n    void put(int _key, int value) {\n        \n        if(mpp.count(_key))\n        {\n           node* nde = mpp[_key];\n           mpp.erase(_key);\n           deleteNode(nde);\n        }\n        if(mpp.size()==size)\n        {\n           mpp.erase(tail->prev->key);\n           deleteNode(tail->prev);\n        }\n        addNode(new node(_key,var));\n        mpp[_key] = head->next;\n    }\n};\n", "reasoning": "\nUsed \"var\" instead of \"value\" in addNode function which is not defined anywhere.\n"}, {"lang": "java", "bug_type": "illegal keywords", "buggy_code": "\nclass Solution {\n    public String smallestEquivalentString(String s1, String s2, String baseStr) {\n        \n        UFDS dsu = new UFDS(26);\n        for(int i = 0; i < s1.length(); i++){\n            dsu.union(s1.charAt(i)-97,s2.charAt(i)-97);\n        }\n\n        StringBuilder sb = new StringBuilder(); \n\n        for(int i = 0; i < baseStr.length(); i++){\n            int root = dsu.root(baseStr.charAt(i) - 97);\n            sb.append((char)(dsu.min[root] + 97));\n        }\n        return sb.toString();\n    }\n    \n    class UFDS{\n        \n        int[] id;\n        int[] size;\n        int[] min;\n        \n        public UFDS(int N){\n            \n            id = new int[N];\n            size = new int[N];\n            min = new int[N];\n            for(int i = 0; i < N; i++){\n                id[i] = i;\n                size[i] = 1;\n                min[i] = i;\n            }\n        }\n        \n        private int root(int i){\n            while (i != id[i]){\n                id[i] = id[id[i]];\n                global i = id[i];\n            }\n            return i;\n        }\n        \n        public void union(int p, int q){\n            \n            int i = root(p);\n            int j = root(q);\n            if(i == j)return;\n            if(size[i] < size[j]){\n                id[i] = id[j];\n                size[j] += size[i];\n                min[j] = Math.min(min[i],min[j]);\n            }\n            else{\n                id[j] = id[i];\n                size[i] += size[j];\n                min[i] = Math.min(min[i],min[j]);\n            }\n        }\n\n    }   \n}\n", "reasoning": "\nThe word \"global\" is undefined in Java, causing a syntax error in the root method.\n"}, {"lang": "cpp", "bug_type": "illegal keywords", "buggy_code": "\nclass Solution {\npublic:\n\n    // declare a dp\n\n    int dp[105][10005];\n\n    int helper(vector<int>& arr, int i, int n, int sum)\n    {\n        // base case\n\n        if(sum == 0)\n        {\n            return 0;\n        }\n\n        if(i >= n || sum < 0)\n        {\n            return INT_MAX - 1000;\n        }\n\n        // if already calculated\n\n        if(dp[i][sum] != -1)\n        {\n            return dp[i][sum];\n        }\n\n        // at each ith element we have two options either include or exclude\n\n        int mini = INT_MAX;\n\n        // inclusion part\n\n        if(arr[i] <= sum)\n        {\n            mini = min(mini, 1 + helper(arr, i, n, sum - arr[i]));\n        }\n\n        // exclusion part\n\n        mini = min(mini, helper(arr, i + 1, n, sum));\n\n        // store the res in dp\n\n        return dp[i][sum] = mini;\n    }\n\n    int numSquares(int n) {\n\n        vector<int> arr;\n\n        // find all the squares between 1 to n\n\n        for(int i = 1; i * i <= n; i++)\n        {\n            arr.push_back(i * i);\n        }\n\n        // initialize dp with -1\n\n        memset(dp, -1, sizeof(dp));\n\n        \n        print(helper(arr, 0, arr.size(), n));\n    }\n};\n", "reasoning": "\n'print' is a Python keyword, not C++. It should be replaced with std::cout or printf.\n"}, {"lang": "java", "bug_type": "illegal keywords", "buggy_code": "\nclass Solution {\n    public int numberOfBeams(String[] bank) {\n        int prevLazer =0;\n        int ans =0;\n        for(String s:bank){\n            int curLazer = 0;\n            for(char c: s.toCharArray()){\n                if(c=='1'){\n                    curLazer++;\n                }\n            }\n            if(curLazer >0){\n                ans += (curLazer * prevLazer);\n                prevLazer = curLazer;\n            }\n        }\n        print(ans);\n        return ans;\n    }\n}\n", "reasoning": "\nThe bug is using 'print' command which is undefined in Java. It should be 'System.out.print'.\n"}, {"lang": "java", "bug_type": "illegal keywords", "buggy_code": "\nclass Solution {\n    public bool checkOnesSegment(String s) {\n        int count=0;\n        int pos=0;\n        while(s.charAt(pos)!='1'){\n              pos++;\n            if(pos==s.length()){\n                return true;\n            }\n          }\n          \n        for(int i=pos;i<s.length();i++){\n              if(s.charAt(i)=='0'){\n                  count++;\n              }\n              else if(count>0&&s.charAt(i)=='1'){\n                  return false;\n              }\n        } \n        return true;\n    }\n}\n", "reasoning": "\nThe 'bool' keyword is not defined in Java, it should be 'boolean'.\n"}, {"lang": "cpp", "bug_type": "illegal keywords", "buggy_code": "\nclass Solution {\npublic:\n    int minOperations(vector<int>& nums) {\n       int count = 0; \n       for(int i=1; i<nums.size(); i++) if(nums[i] <= nums[i-1]) { count += nums[i-1]+1-nums[i]; nums[$i] = nums[i-1]+1; }\n\n       return count; \n    }\n};\n", "reasoning": "\nThe bug lies in the usage of \"$i\" which is an undefined variable in C++.\n"}, {"lang": "java", "bug_type": "illegal keywords", "buggy_code": "\nclass Solution {\n    public int largestInteger(int num) {\n        String numString = \"\"+ num;\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        for(Character c : numString.toCharArray()){\n            int n = Character.getNumericValue(c);\n            if(n%2==0){\n                even.add(n);\n            }else{\n                odd.add(n);\n            }\n        }\n        Collections.sort(even, Collections.reverseOrder());\n        Collections.sort(odd, Collections.reverseOrder());\n        String res =\"\";\n        int one=0, two=0;\n        for(int i=0; i<numString.length(); i++){\n            int n = Character.getNumericValue(numString.charAt(i));\n            if(n%2==0){\n                res += even.get(one);\n                one++;\n            }else{\n                res += odd.get(two);\n                two++;\n            }\n        }\n        return Integer.parse_int(res);\n    }\n}\n", "reasoning": "\nJava uses Integer.parseInt method, not Integer.parse_int as in some other languages\n"}, {"lang": "java", "bug_type": "illegal keywords", "buggy_code": "\nclass Solution {\n    public String firstPalindrome(String[] words) {\n        for (String s : words) {\n            if (isPalindrome(s)) return s;\n        }\n\n        return \"\";\n    }\n\n    public bool isPalindrome(String s) {\n        int i = 0, j = s.length() - 1;\n\n        while (i < j) {\n            if (s.charAt(i++) != s.charAt(j--)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n", "reasoning": "\nThe bool data type is not valid in Java, the correct data type is boolean.\n"}, {"lang": "java", "bug_type": "illegal keywords", "buggy_code": "\nclass Solution {\n    public int numJewelsInStones(String jewels, String stones) {\n        int count = 0;\n        let checkCharacter;\n\n        for(int i=0; i<stones.length(); i++){\n            checkCharacter = stones.charAt(i);\n            if(jewels.contains(String.valueOf(checkCharacter))){\n                count++;\n            }\n        }\n        return count;\n    }\n}\n", "reasoning": "\nUsed \"let\" to declare variable, but \"let\" keyword doesn't exist in Java language.\n"}], "heuristic": "<heuristic>Identifying and resolving language-specific keyword and syntax errors involves a procedural approach. Start by reviewing the error message if available, as compilers or IDEs typically point to the line number and give a hint about the nature of the problem. If an error message is not available or unclear, manually check the syntax focusing on language-specific peculiarities. For keywords and variable declarations, ensure that the keywords (such as `dict` in C++, `global` in Java, or `bool` in Java) align with the language's standard library and syntax conventions. For language-specific constructs (like `print` in C++ or Java), check if the standard input/output library or method signatures are correctly used (e.g., `System.out.print` in Java, `std::cout` in C++). This process requires familiarity with the language's syntax rules and standard libraries. Understanding common pitfalls in switching between languages can also be highly beneficial. Search documentation or language-specific forums if a solution isn't immediately apparent, as these platforms often offer insights into common errors and their resolutions.</heuristic>"}