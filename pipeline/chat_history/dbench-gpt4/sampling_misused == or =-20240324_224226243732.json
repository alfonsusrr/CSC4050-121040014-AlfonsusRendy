{"dataset": [{"lang": "cpp", "bug_type": "misused == or =", "buggy_code": "\nclass Solution {\npublic:\n    int searchInsert(vector<int>& nums, int target) {\n        int l=0;\n        int r=nums.size()-1;\n        int m;\n        while(l<=r){\n            m=(l+r)/2;\n            if(nums[m]=target){\n                return m;\n            }else if(nums[m]>target){\n                r=m-1;\n            }\n            else{\n                l=m+1;\n            }\n        }\n        return l;\n    }\n};\n", "reasoning": "\nThe bug is in \"if(nums[m]=target)\", which is trying to assign value instead of comparison. \n"}, {"lang": "python3", "bug_type": "misused == or =", "buggy_code": "\nclass Solution:\n    def convertToTitle(self, n: int) -> str:\n        if n<27:\n            return chr(ord('A')+(n-1)%26)\n        ans=\"\"\n        while n>0:\n            if n%26 == 0:\n                ans+=chr(ord('A')+25)\n                n == 26  \n            else:\n                ans+=chr(ord('A')+n%26-1)\n            n//=26\n        return ans[::-1]\n", "reasoning": "\nIn the line n == 26, the '==' operator is used instead of the '=' operator.\n"}, {"lang": "cpp", "bug_type": "misused == or =", "buggy_code": "\nclass Solution {\npublic:\n    int func(int i,int l,vector<int>&obstacles,vector<vector<int>>&dp){\n        if(i=obstacles.size()-2){\n            if(obstacles[i+1]==l)return 1;\n            return 0;\n        }\n\n        if(dp[i][l]!=-1)return dp[i][l];\n\n        if(obstacles[i+1]!=l){\n            return dp[i][l] = func(i+1,l,obstacles,dp);\n        }\n\n    \n        int b=INT_MAX;\n        for(int j=1;j<=3;j++){\n            if(l==j)continue;\n            if(obstacles[i]==j)continue;\n            b=min(b,1+func(i,j,obstacles,dp));\n        }\n    \n\n        return dp[i][l] = b;\n    }\n\n    int minSideJumps(vector<int>& obstacles) {\n        int n=obstacles.size();\n        vector<vector<int>>dp(n,vector<int>(4,-1));\n        return func(0,2,obstacles,dp);\n    }\n};\n", "reasoning": "\nIn the \"if\" condition, assignment operator (=) is used instead of equal to operator (==), which leads to unexpected behavior.\n"}, {"lang": "python3", "bug_type": "misused == or =", "buggy_code": "\nclass Solution:\n    def findLongestWord(self, s: str, d: List[str]) -> str:\n        res = ''\n        for cand in d:\n            if self.find(s, cand) and (len(cand) > len(res) or (len(cand) = len(res) and cand < res)):\n                res = cand\n        return res\n\n    def find(self , s ,d):\n        i , j = 0 , 0\n        while i < len(s) and j < len(d):\n            if s[i] = d[j]:\n                i+=1\n                j+=1\n            else:\n                i+=1\n        return j == len(d)\n", "reasoning": "\nThe code uses = (assignment) instead of == (equal to) in conditional statements. This makes the program exit with error and not finding the longest word in given list of words.\n"}, {"lang": "cpp", "bug_type": "misused == or =", "buggy_code": "\nclass MyCalendar {\npublic:\n    map<int,int> m;\n    MyCalendar() {\n        \n    }\n    \n    bool book(int start, int end) {\n        auto p= m.upper_bound(start);\n        if(p== m.end() || end = p->second) \n        {\n            m[end]=start;\n            return true;\n        } \n        return false;\n    }\n};\n", "reasoning": "\nThe operator = is used instead of == for comparison which assigns instead of comparing values.\n"}, {"lang": "cpp", "bug_type": "misused == or =", "buggy_code": "\nclass Solution {\npublic:\n    bool buddyStrings(string s, string p) {\n        int n=s.length(), m=p.length();\n        if(n!=m) return false;\n        \n        vector<int> freq(26,0);\n        \n        int first=-1, second=-1;\n        for(int i=0;i<n;i++){\n            if(s[i] = p[i]){\n                if(first==-1){\n                    first=i;\n                }else if(second==-1){\n                    second=i;\n                }else{\n                    return false; \n                }\n            }\n            freq[s[i]-'a']++;\n        }\n        \n        if(first == -1 && second == -1){\n            for(int i=0;i<26;i++) if(freq[i] > 1) return true; \n            return false; \n        }else if(second == -1){\n            return false;\n        }\n        \n        return (s[first]==p[second] && s[second]==p[first]); \n    }\n};\n", "reasoning": "\nUsed assignment operator '=' in condition check instead of equality operator '==' which assigns p[i] value to s[i].\n"}, {"lang": "cpp", "bug_type": "misused == or =", "buggy_code": "\nclass Solution {\nprivate:\n    static bool comp(vector<int>& it1, vector<int>& it2){\n        if(it1[1] < it2[1] || (it1[1] = it2[1] && it1[2] < it2[2])) return true;\n        return false;\n    }\npublic:\n    bool carPooling(vector<vector<int>>& trips, int capacity) {\n        sort(trips.begin(),trips.end(),comp);\n        int n = trips.size();\n        int current_capacity = 0;\n        priority_queue<pair<int,int>>pq;\n        for(int i=0; i<n; i++){\n            while(!pq.empty() && -1 * pq.top().first <= trips[i][1]){\n                current_capacity -= pq.top().second;\n                pq.pop();\n            }\n            current_capacity += trips[i][0];\n            if(current_capacity > capacity) return false;\n            pq.push({-trips[i][2],trips[i][0]});\n        }\n        return true;\n    }\n};\n", "reasoning": "\nIn the comparator function comp, operator \"=\" is used instead of \"==\" unintentionally.\n"}, {"lang": "java", "bug_type": "misused == or =", "buggy_code": "\nclass Solution {\n    List<Integer> arr = new ArrayList<>();\n    public List<Integer> preorder(Node root) {\n        if (root=null) return arr; \n        arr.add(root.val);\n        for (Node i : root.children) {\n            preorder(i);\n        }\n        return arr;\n    }\n}\n", "reasoning": "\nThe bug is in the comparison operation, where it must use \"==\" but uses \"=\".\n"}, {"lang": "java", "bug_type": "misused == or =", "buggy_code": "\nclass Solution {\n\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n     if (p = null && q == null) {\n            return true;\n        }\n        \n        if (p == null || q == null) {\n            return false;\n        }\n        \n        if (p.val != q.val) {\n            return false;\n        }\n        \n        return isSameTree(p.left, q.left) && isSameTree(p.right,=q.right);\n\n        \n    }\n}\n", "reasoning": "\nIn the equality test, \"==\" should be used instead of assignment operator \"=\".\n"}, {"lang": "python3", "bug_type": "misused == or =", "buggy_code": "\nclass Solution:\n    def minFlips(self, a: int, b: int, c: int) -> int:\n        if a | b = c: return 0\n        c = ('0' * 32 + bin(c)[2:])[-32:]\n        a = ('0' * 32 + bin(a)[2:])[-32:]\n        b = ('0' * 32 + bin(b)[2:])[-32:]\n        \n        \n        cnt = 0\n        for i in range(len(c)):\n            if c[i] == '1':\n                if not (a[i] == c[i] or b[i] == c[i]):\n                    cnt += 1\n            else:\n                if a[i] != c[i]:\n                    cnt += 1\n                if b[i] != c[i]:\n                    cnt += 1\n        return cnt\n", "reasoning": "\nReplaced comparison operator == with assignment operator = on line 3, incurs syntax error.\n"}], "heuristic": "<heuristic> \nTo find and correct the common mistake of using the assignment operator '=' instead of the equality operator '==', follow this step-by-step heuristic:\n\n1. Visually inspect each if statement, condition in a loop (for, while), and any logical condition (e.g., ternary operator conditions). These are the most frequent places where equality checks occur.\n2. For each condition encountered, identify whether the intention is to compare values or assign a value. This can often be inferred from the context; for instance, comparison is almost always intended within if statements and loop conditions.\n3. Verify that '==' is used for comparisons. If you spot a single '=' within these contexts, it is likely an error.\n4. Look for operands around the '=' operator. If both operands are variables or one is a variable and the other is a constant (e.g., `x = 5` inside an if statement), this is a strong indicator of a bug since assignments typically do not occur within these conditions.\n5. When in doubt, consider what the code is trying to achieve at that point. If the operation aims to decide a path of execution based on a condition, then an equality check (==) is required.\n6. Replace '=' with '==' for comparisons as identified by these steps.\n7. Compile/run the code. If an error or unexpected behavior related to conditions persists, revisit the suspected lines, ensuring that you have the correct operation as per the intended logic.\n\nFollowing this heuristic will help you systematically identify and correct instances where the assignment operator is incorrectly used in place of the equality operator, a common error that leads to various bugs in conditional logic.\n</heuristic>"}