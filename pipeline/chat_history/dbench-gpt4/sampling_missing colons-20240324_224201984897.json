{"dataset": [{"lang": "python3", "bug_type": "missing colons", "buggy_code": "\nclass Solution:\n    def findAllRecipes(self, recepies: List[str], ingredients: List[List[str]], supplies: List[str]) -> List[str]:\n        dct=defaultdict(lambda :[])\n        indegree={}\n        n=len(recepies)\n\n        for i in recepies:\n            indegree[i]=0\n\n        for i in range(n)\n            for j in ingredients[i]:\n                indegree[j]=0\n\n        for i in range(n):\n            for j in ingredients[i]:\n                dct[j].append(recepies[i])\n                indegree[recepies[i]]+=1\n\n        st=[]\n        for i in indegree:\n            if indegree[i]==0:\n                st.append(i)\n        flst=[]\n        ans=defaultdict(lambda :[])\n        while st:\n            x=st.pop(0)\n            for i in dct[x]:\n                for j in ans[x]:\n                    if j not in ans[i]:\n                        ans[i].append(j)\n                ans[i].append(x)\n                indegree[i]-=1\n                if indegree[i]==0:\n                    st.append(i)\n            if x in recepies:\n                for k in ans[x]:\n                    if k not in supplies:\n                        break\n                else:\n                    flst.append(x)\n                    supplies.append(x)\n\n        return flst\n", "reasoning": "\nThe bug is that a colon is missing at the end of a for loop.\n"}, {"lang": "python3", "bug_type": "missing colons", "buggy_code": "\nclass Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n\n        pre = defaultdict(list)\n        for course, p in prerequisites\n            pre[course].append(p)\n        \n        taken = set()\n\n        def dfs(course):\n            if not pre[course]:\n                return True       \n            if course in taken:\n                return False       \n            taken.add(course)\n            for p in pre[course]:\n                if not dfs(p): return False        \n            pre[course] = []\n            return True\n        \n        for course in range(numCourses):\n            if not dfs(course):\n                return False\n        return True\n", "reasoning": "\nA colon is missing after the 'for' loop in line 5 which will generate SyntaxError.\n"}, {"lang": "python3", "bug_type": "missing colons", "buggy_code": "\nclass Solution:\n    def maxPerformance(self, n: int, speed: List[int], efficiency: List[int], k: int) -> int:\n        MOD = 10**9 + 7\n\n        top_k_speeds = []\n        res, top_k_sum = 0, 0\n\n        pairs = [(e, s) for e, s in zip(efficiency, speed)]\n        for e, s in sorted(pairs, reverse = True)\n            heapq.heappush(top_k_speeds, s)\n            top_k_sum += s\n\n            if len(top_k_speeds) > k:\n                top_k_sum -= heapq.heappop(top_k_speeds)\n\n            res = max(res, e * top_k_sum)\n        \n        return res % MOD\n", "reasoning": "\nA colon is missing after the for loop, which will cause a syntax error.\n"}, {"lang": "cpp", "bug_type": "missing colons", "buggy_code": "\nclass Solution {\npublic:\n    long long fact(int n)\n    {\n        if(n<=1)return 1;\n        return (n*fact(n-1)%1000000007)%1000000007;\n    }\n    int numPrimeArrangements(int n) {\n        if(n==1)return 1;\n        if(n<=3)return n-1;\n        int t=0,flag;\n        for(int i=2;i<=n;i++)\n        {\n            flag=0;\n            for(int j=2;j<sqrt(i);j++)\n            {\n                if(i%j==0)\n                {\n                    flag=1;\n                    break;\n                }\n            }\n            if(flag==0)\n            {\n                t++;\n            }\n        }\n        return (fact(t)*fact(n-t))%1000000007;\n\n    }\n};\n", "reasoning": "\nThe '<' in the inner for loop should be a '<=' to check all necessary factors.\n"}, {"lang": "python3", "bug_type": "missing colons", "buggy_code": "\nclass Solution:\n    def makeSmallestPalindrome(self, s: str) -> str\n        before = 0\n        after = len(s)-1\n        l = [i for i in s]\n        while before <= len(s)/2:\n            l[before] = min(l[before], l[after])\n            l[after] = l[before]\n            before+=1\n            after-=1\n        return \"\".join(l)\n", "reasoning": "\nThe method definition is missing a colon after the method declaration which causes syntax error.\n"}, {"lang": "java", "bug_type": "missing colons", "buggy_code": "\nclass AuthenticationManager {\n\n    int time=0;\n\n    HashMap<String,Integer>mp=new HashMap<>();\n\n    public AuthenticationManager(int timeToLive) {\n        \n    time=timeToLive\n\n    }\n    \n    public void generate(String tokenId, int currentTime) {\n        \n    mp.put(tokenId,currentTime+time);\n\n    }\n    \n    public void renew(String tokenId, int currentTime) {\n        \n    if(!mp.containsKey(tokenId)||mp.get(tokenId)<=currentTime)\n    {\n    return;\n    }\n\n    mp.put(tokenId,currentTime+time);\n\n    }\n    \n    public int countUnexpiredTokens(int currentTime) {\n    \n    List<String>lr=new ArrayList<>(mp.keySet());\n    \n    for(int i=0;i<lr.size();i++){\n    \n    if(mp.get(lr.get(i))<=currentTime)mp.remove(lr.get(i));\n\n    }\n\n    return mp.size();\n    \n    }\n}\n\n/**\n * Your AuthenticationManager object will be instantiated and called as such:\n * AuthenticationManager obj = new AuthenticationManager(timeToLive);\n * obj.generate(tokenId,currentTime);\n * obj.renew(tokenId,currentTime);\n * int param_3 = obj.countUnexpiredTokens(currentTime);\n */\n", "reasoning": "\nThe code misses a semicolon to end the statement inside the constructor of the AuthenticationManager class.\n"}, {"lang": "cpp", "bug_type": "missing colons", "buggy_code": "\nclass Solution {\npublic:\n    double average(vector<int>& salary) {\n        int n=salary.size(),sum=0,Min=INT_MAX,Max=INT_MIN;\n        for(int i:salary){\n            Max = Max < i ? i : Max \n            Min = Min > i ? i : Min ;\n            sum += i;\n        }\n        sum -= (Min + Max);\n        return sum/(n-2.0);\n    }\n};\n", "reasoning": "\nThe missing semicolon after the Max value assignment leads to a syntax error.\n"}, {"lang": "java", "bug_type": "missing colons", "buggy_code": "\nclass Solution {\n    public int matrixSum(int[][] nums) {\n        int score = 0;\n        int n = nums.length\n        int m = nums[0].length;\n        for(int[] a :nums)\n        {\n            Arrays.sort(a);\n        }\n        for(int i=0;i<m;i++)\n        {\n            int max = 0;\n            for(int j=0;j<n;j++)\n            {\n                max = Math.max(max,nums[j][i]);\n            }\n            score+=max;\n        }\n        return score;\n    }\n}\n", "reasoning": "\nThere is a missing semicolon at the end of the variable n declaration.\n"}, {"lang": "java", "bug_type": "missing colons", "buggy_code": "\nclass Solution {\n    double possible = 0.0;\n    double valid = 0.0;\n    \n    public double getProbability(int[] balls) {\n        int[] first = new int[balls.length];\n        int[] second = new int[balls.length];\n        dfs(balls, first, second, 0, 0, 0)\n        return valid / possible;\n    }\n    \n    private void dfs(int[] balls, int[] first, int[] second, int num1, int num2, int idx) {\n        // finish all colors, check if this's a possible/valid distribution\n        if (idx == balls.length) {\n            if (num1 == num2) {\n                double distrib = permFake(first) * permFake(second);\n                possible += distrib;\n                if (unique(first) == unique(second)) {\n                    valid += distrib;\n                }\n            }\n            return;\n        }\n        for (int b = 0; b <= balls[idx]; b++) {\n            first[idx] = b;\n            second[idx] = balls[idx] - b;\n            dfs (balls, first, second, num1 + first[idx], num2 + second[idx], idx + 1);\n        }\n    }\n    \n    private int unique(int[] balls) {\n        int unique = 0;\n        for (int b: balls)\n            unique += b > 0 ? 1 : 0;\n        return unique;\n    }\n    \n    private double permFake(int[] balls) {\n        double ret = 1.0;\n        for (int b: balls)\n            ret /= factorial(b);\n        return ret;\n    }\n    \n    private int factorial(int n){\n        int ret = 1;\n        while (n > 0) {\n            ret *= n;\n            n--;\n        }\n        return ret;\n    }\n}\n", "reasoning": "\nMissing semicolon at the end of the dfs function call inside the getProbability method.\n"}, {"lang": "cpp", "bug_type": "missing colons", "buggy_code": "\nclass Solution {\npublic:\n    \n    vector<string> multiply(vector<string>& a, vector<string>& b){\n        if(a.empty()) return b;\n        if(b.empty()) return a;\n        vector<string> ans;\n        for(auto&i:a){\n            for(auto&j:b) ans.push_back(i+j);\n        }\n        return ans\n    }\n    \n    vector<string> braceExpansionII(string expression) {\n        vector<string>  res, curr;\n        stack<vector<string>> st;\n        for(auto&x:expression){\n            if(x >= 'a' and x <= 'z'){\n                if(curr.size()) for(auto&i:curr) i += x;\n                else curr.push_back(string(1, x));\n            }\n            else if(x == '{'){\n                st.push(res); st.push(curr);\n                res.clear(), curr.clear();\n            }\n            else if(x == '}'){\n                vector<string> preCurr = st.top(); st.pop();\n                vector<string> preRes = st.top(); st.pop();\n                for(auto&i:curr) res.push_back(i);\n                curr = multiply(preCurr, res);\n                res = preRes;\n            }\n            else if(x == ','){\n                for(auto&i:curr) res.push_back(i);\n                curr.clear();\n            }\n        }\n        for(auto&i:curr) res.push_back(i);\n        sort(res.begin(), res.end());\n        return vector<string>(res.begin(), unique(res.begin(), res.end()));\n    }\n};\n", "reasoning": "\nThe function multiply is missing a semi-colon at the end of the return statement.\n"}], "heuristic": "<heuristic> To identify and correct syntax errors involving missing colons or semicolons in code blocks, follow this step-by-step heuristic: Start by scanning the code for common constructs that require a colon or semicolon at their end, such as for loops, if/else statements, function definitions in languages like Python, and line endings in languages like C++, Java, and JavaScript. For each candidate line, check if it is followed by a colon (in Python) when defining loops, conditions, or function declarations. If not, add a colon at the end of the line. For languages that use semicolons to terminate statements (like C++, Java, and JavaScript), examine each line or statement to ensure it ends with a semicolon, especially after variable declarations, return statements, and function calls. Pay particular attention to lines before blocks of code that seem improperly separated or before unexpected errors or warnings highlighted by the IDE or compiler. If a semicolon is missing, add it to the correct position at the end of the line or statement. Re-run or recompile your code after each correction to check if the error is resolved. Repeat this process until all syntax errors regarding missing colons or semicolons are corrected. </heuristic>"}