{"dataset": [{"lang": "python3", "bug_type": "condition error", "buggy_code": "\nclass Solution:\n    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        out=[]\n        for i in range(0,len(nums1)):\n            if(nums2.index(nums1[i])==len(nums2)-1):\n                out.append(-1)\n            else:\n                j=nums2.index(nums1[i])+1\n                while(1):\n                    if(nums1[i]<nums2[j]):\n                        out.append(nums2[j])\n                        break\n                    if(j==len(nums2)):\n                        out.append(-1)\n                        break\n                    j+=1\n        return out\n", "reasoning": "\nThe while loop will attempt to index the nums2 list out of its range.\n"}, {"lang": "cpp", "bug_type": "condition error", "buggy_code": "\nclass Solution {\npublic:\n    \n    int trap(vector<int>& height) {\n\n        int n = height.size();\n        int left = 0,right = n;\n        int res = 0;\n        int left_max = 0,right_max = 0;\n\n        while(left <= right){\n            if(height[left] <= height[right]){\n                if(height[left] >= left_max){\n                    left_max = height[left];\n                }\n                else{\n                    res += left_max - height[left];\n                }\n                left++;\n            }\n            else{\n                if(height[right] >= right_max){\n                    right_max = height[right];\n                }\n                else{\n                    res += right_max - height[right];\n                }\n                right--;\n            }\n        }\n        return res;\n\n    }\n};\n", "reasoning": "\nIncreased 'right' variable by 1, now it points beyond the array causing out-of-bounds access.\n"}, {"lang": "java", "bug_type": "condition error", "buggy_code": "\nclass Solution {\n    public List<Integer> findLonely(int[] arr) {\n        HashMap<Integer, Integer> map = new HashMap<>();\n        ArrayList<Integer> list = new ArrayList<>();\n        \n        for (int i : arr) map.put(i, map.getOrDefault(i, 0) + 1);\n        for (int i : arr) if (map.get(i) == 1 && map.containsKey(i - 1) && map.containsKey(i + 1)) list.add(i);\n        return list;\n    }\n}\n", "reasoning": "\nThe bug is in the second loop condition which should exclude, not include, adjacent elements. \n"}], "heuristic": "the presence of indexing out of range or accessing elements beyond the array's bounds. Additional heuristics include conditions that are not properly excluding adjacent elements or variables being incorrectly incremented or decremented."}